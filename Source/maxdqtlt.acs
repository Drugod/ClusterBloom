/*
 * GZDoom Strafing Camera Tilting
 * Copyright (C) 2016 Nash Muhandes
 *
 */

// Feel free to do whatever you want with this, though credits would be
// appreciated! You don't need to ask for my permission to use this code
// in your mods.
// Nash

// This version contains also MaxED underwater effects... amazing!

#library "maxdqtlt"
#include "zcommon.acs"

//===========================================================================
//
// UTILITY FUNCTIONS
//
//===========================================================================

// player is on ground?
function int CheckIsPlayerOnFloor(void)
{
	return GetActorZ(0) == GetActorFloorZ(0) || GetActorVelZ(0) == 0 &&
	!Spawn("Z_CheckIsActorOnFloor", GetActorX(0), GetActorY(0), GetActorZ(0) - (4 << 16), 0, GetActorAngle(0));
}

// get player velocity
function int GetPlayerMoveSpeed(void)
{
	return VectorLength(GetActorVelX(0), GetActorVelY(0));
}

// input checking
function bool KeyUp(int key)
{
    return !(GetPlayerInput(-1, INPUT_BUTTONS) & key);
}

function bool KeyDown(int key)
{
    return !!(GetPlayerInput(-1, INPUT_BUTTONS) & key);
}

// [Nash] is player alive?
function int GetActorHealth(void)
{
	return GetActorProperty(0, APROP_Health);
}

bool doStrafeTilt = TRUE; //nash
bool doDeathTilt = TRUE; // [Nash] death tilt
int uwrollammountcount = 70; //mxd
int uwrollammount[70] = {-0.012, -0.01199, -0.01195, -0.01189, -0.01181, -0.0117, -0.01157, -0.01141, -0.01123, -0.01103, -0.01081, -0.01057, -0.0103, -0.01001, -0.00971, -0.00938, -0.00904, -0.00867, -0.00829, -0.0079, -0.00748, -0.00705, -0.00661, -0.00615, -0.00569, -0.00521, -0.00472, -0.00422, -0.00371, -0.00319, -0.00267, -0.00214, -0.00161, -0.00108, -0.00054, 0, 0.00054, 0.00108, 0.00161, 0.00214, 0.00267, 0.00319, 0.00371, 0.00422, 0.00472, 0.00521, 0.00569, 0.00615, 0.00661, 0.00705, 0.00748, 0.0079, 0.00829, 0.00867, 0.00904, 0.00938, 0.00971, 0.01001, 0.0103, 0.01057, 0.01081, 0.01103, 0.01123, 0.01141, 0.01157, 0.0117, 0.01181, 0.01189, 0.01195, 0.01199}; //mxd

script "Script_StrafeTilt" ENTER
{
	int uwrollstep = 35; //mxd
	int defaultuwrollstep = uwrollstep; //mxd
	int uwrolldirection = 1; //mxd

	int strafeSpeed = 0.0005;

	while(true)
	{
		// update strafe tilt user preference
		doStrafeTilt = GetCVar("cl_strafetilt");

		//mxd. Do underwater camera sway
		if(GetActorProperty(0, APROP_Waterlevel) == 3)
		{
			ChangeActorRoll(0, uwrollammount[uwrollstep], true);
			//Change rolling direction?
			if(uwrollstep == uwrollammountcount - 1) uwrolldirection = -1;
			else if(uwrollstep == 0)  uwrolldirection = 1;
			uwrollstep += uwrolldirection;
		}

		else if(uwrollstep != defaultuwrollstep) //mxd. De-roll camera afer leaving the water
		{
			if(uwrollstep > defaultuwrollstep) uwrollstep--;
			else uwrollstep++;
			ChangeActorRoll(0, uwrollammount[uwrollstep], true);
		}

		//mxd. Do strafe tilting
		else if(GetActorHealth() > 0)
		{
			int strafeMod, strafe;

			// receive input
			// only fast movement will cause tilt
			if (CheckIsPlayerOnFloor() && GetPlayerMoveSpeed() > 1.1)
			{
				strafeMod = GetPlayerInput(-1, INPUT_SIDEMOVE) / 50;
			}
			else
			{
				// reset view
				if (strafe < 0)
					strafe += strafeSpeed;

				if (strafe > 0)
					strafe -= strafeSpeed;
			}

			// tilt left
			if (strafeMod < 0 && strafe >= strafeMod)
			{
				strafe -= strafeSpeed;
			}

			// tilt right
			if (strafeMod > 0 && strafe <= strafeMod)
			{
				strafe += strafeSpeed;
			}

			// reset view
			// when no movement keys are pressed or if player starts to move slow
			if ((!(KeyDown(BT_MOVELEFT) || GetPlayerInput(-1, INPUT_SIDEMOVE) < 0) &&
				!(KeyDown(BT_MOVERIGHT) || GetPlayerInput(-1, INPUT_SIDEMOVE) > 0))
				|| GetPlayerMoveSpeed() < 1.1)
			{
				if (strafe < 0)
					strafe += strafeSpeed;

				if (strafe > 0)
					strafe -= strafeSpeed;
			}

			// limits
			if (strafe < -1.0)
				strafe = -1.0;

			if (strafe > 1.0)
				strafe = 1.0;

			// tilt!
			if (!doStrafeTilt)
			{
				strafe = 0;
			}
			ChangeActorRoll(0, strafe, TRUE);
		}

		Delay(1);
	}
}

// [Nash] Duke-style death tilt
script "Script_DeathTilt" Death
{
	// reset the player's roll first
	SetActorRoll(0, 0);

	if (doDeathTilt)
	{

		// roll direction
		int direction = random(0, 1);

		// target angle to roll to
		int target;

		if (!direction)
		{
			target = random(0.25, 0.35);
		}
		else
		{
			target = random(-0.35, -0.25);
		}

		// speed of the roll
		int speed;

		// how many tics before the rolling actually starts, tune to taste
		int _delay = 20;

		// roll duration counter
		int rollCounter;
		int rollCounterMax = random(12, 24);

		while(GetActorHealth() <= 0)
		{
			// delay the rolling until it's time
			if (_delay > 0)
			{
				_delay--;
			}

			// it's time to roll
			if (_delay <= 0)
			{
				// get player's roll
				int roll = GetActorRoll(0);

				// do a barrel roll
				if (direction == 0)
				{
					if (rollCounter < rollCounterMax)
					{
						speed += 0.00150;
					}
				}
				else
				{
					if (rollCounter < rollCounterMax)
					{
						speed -= 0.00150;
					}
				}

				rollCounter++;

				// roll
				if (rollCounter < rollCounterMax) ChangeActorRoll(0, roll + speed, TRUE);
			}
			Delay(1);
		}
	}
}

script "Script_DeathTiltReset" Respawn
{
	SetActorRoll(0, 0);
}